'use client';

import { useState } from 'react';

import { MonitorSmartphone, Layers, Rocket, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Container } from '@/components/ui/container';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { SectionHeader } from '@/components/ui/section-header';
import { websitePackages as websitePackagesData } from '@/data/packages';
import type { PackageDetail } from '@/data/packages';
import { PackageModal } from '@/components/packages/package-modal';
import { MotionItem, MotionSection } from '@/components/ui/motion-section';

const iconMap = {
  monitorSmartphone: MonitorSmartphone,
  layers: Layers,
  rocket: Rocket,
  sparkles: Sparkles,
} as const;

export function WebsitePackagesSection() {
  const [selectedPackage, setSelectedPackage] = useState<PackageDetail | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const handleOpen = (pkg: PackageDetail) => {
    setSelectedPackage(pkg);
    setModalOpen(true);
  };

  const handleOpenChange = (open: boolean) => {
    setModalOpen(open);
    if (!open) {
      setSelectedPackage(null);
    }
  };

  return (
    <section className="py-16 md:py-24">
      <Container className="space-y-10">
        <MotionSection className="space-y-10" as="div">
          <MotionItem>
            <SectionHeader
              align="center"
              eyebrow="Website Packages"
              title="Website Packages Snapshot"
              description="Choose a starting point built around performance, usability, and your growth goals."
              className="mx-auto max-w-3xl"
            />
          </MotionItem>
          <MotionSection
            as="div"
            className="grid grid-cols-1 gap-6 overflow-x-auto pb-6 md:grid-cols-2 md:gap-6 md:overflow-visible xl:grid-cols-4"
            delay={0.12}
          >
            {websitePackagesData.map((pkg, index) => {
              const Icon = iconMap[pkg.icon as keyof typeof iconMap] ?? MonitorSmartphone;

              return (
                <MotionItem
                  key={pkg.id}
                  delay={index * 0.08}
                  triggerOnViewport={false}
                  className="h-full min-w-[280px] md:min-w-0"
                >
                  <Card
                    id={pkg.id}
                    className="bg-[var(--pv-bg)]/95 dark:bg-[var(--pv-surface)]/95 group flex h-full flex-col border border-[var(--pv-border)] transition-all duration-300 hover:-translate-y-1 hover:border-[var(--pv-primary)] hover:shadow-[0_26px_60px_-40px_rgba(63,0,233,0.75)]"
                  >
                    <CardHeader className="flex items-start gap-4 border-b border-[var(--pv-border)] pb-6">
                      <span className="inline-flex h-12 w-12 shrink-0 items-center justify-center rounded-full bg-[linear-gradient(135deg,var(--pv-primary),var(--pv-primary-2))] text-white shadow-[0_22px_46px_-34px_rgba(63,0,233,0.85)] transition-transform duration-300 group-hover:-translate-y-1">
                        <Icon className="h-6 w-6" aria-hidden="true" />
                      </span>
                      <div className="space-y-3">
                        <p className="text-xs font-semibold uppercase tracking-[0.26em] text-[var(--pv-primary)]">
                          {pkg.level}
                        </p>
                        <CardTitle className="text-lg font-medium text-[var(--pv-text)]">
                          {pkg.name}
                        </CardTitle>
                        <p className="text-sm font-medium uppercase tracking-[0.22em] text-[var(--pv-text-muted)]">
                          {pkg.price}
                        </p>
                        <CardDescription className="text-sm leading-6">
                          {pkg.summary}
                        </CardDescription>
                      </div>
                    </CardHeader>
                    <CardContent className="grid flex-1 gap-5 pt-6 text-sm text-[var(--pv-text-muted)] md:grid-rows-[auto,auto]">
                      <div className="min-h-[80px] space-y-2">
                        <p className="text-xs font-semibold uppercase tracking-[0.18em] text-[var(--pv-text)]">
                          Best for
                        </p>
                        <p className="text-sm leading-6 text-[var(--pv-text-muted)]">{pkg.ideal}</p>
                      </div>
                      <div className="min-h-[104px] space-y-2">
                        <p className="text-xs font-semibold uppercase tracking-[0.18em] text-[var(--pv-text)]">
                          Value
                        </p>
                        <p className="leading-6 text-[var(--pv-text-muted)]">{pkg.value}</p>
                      </div>
                    </CardContent>
                    <CardFooter className="mt-auto flex flex-col gap-3 border-t border-[var(--pv-border)] pt-6">
                      <div className="mb-3 space-y-2 text-xs uppercase tracking-[0.18em] text-[var(--pv-text-muted)]">
                        <div className="flex flex-wrap gap-3">
                          <span className="rounded-full border border-[var(--pv-border)] px-3 py-1">
                            Response: {pkg.support.response}
                          </span>
                          <span className="rounded-full border border-[var(--pv-border)] px-3 py-1">
                            Cadence: {pkg.support.cadence}
                          </span>
                        </div>
                      </div>
                      <Button
                        variant="secondary"
                        size="sm"
                        className="w-full"
                        onClick={() => handleOpen(pkg)}
                      >
                        Learn More
                      </Button>
                    </CardFooter>
                  </Card>
                </MotionItem>
              );
            })}
          </MotionSection>
        </MotionSection>
      </Container>
      <PackageModal pkg={selectedPackage} open={modalOpen} onOpenChange={handleOpenChange} />
    </section>
  );
}
